{"version":3,"sources":["components/Table/MainTable.js","components/Heading/Heading.js","App.js","serviceWorker.js","index.js"],"names":["MainTable","props","state","apiResponse","data","columns","label","field","width","rows","changeDayField","this","apiRes","map","obj","recommendStatus","area","zone","bank","stand","netWin","oldDenom","newDenom","oldPaybackPer","newPaybackPer","asset","theDate","i","length","push","recomStatusField","areaField","parseInt","zoneField","bankField","standField","netWinField","oldDenomField","newDenomField","oldPaybackPerField","newPaybackPerField","assetField","dateField","bordered","small","searching","hover","sorting","responsive","paging","React","Component","Heading","style","textAlign","padding","src","alt","App","fetch","then","res","json","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.553221af.chunk.js","sourcesContent":["import React from 'react';\nimport { MDBDataTable } from 'mdbreact';\n\nclass MainTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { apiResponse: [] };\n    }\n        render(){\n            const data = {\n                columns: [            \n                    {\n                    label: \"Change Day\",\n                    field: \"changeDayField\",\n                    width: 150\n                  },\n                  {\n                    label: \"Recommendation Status\",\n                    field: \"recomStatusField\",\n                    width: 150\n                  },\n                  {\n                    label: 'Area',\n                    field: 'areaField',\n                    width: 150\n                  },\n                  {\n                    label: 'Zone',\n                    field: 'zoneField',\n                    width: 150\n                  },\n                  {\n                    label: 'Bank',\n                    field: 'bankField',\n                    width: 150\n                  },\n                  {\n                    label: 'Stand',\n                    field: 'standField',\n                    width: 150\n                  },\n                  {\n                    label: 'NetWin',\n                    field: 'netWinField',\n                    width: 150\n                  },\n                  {\n                    label: 'Old Denom',\n                    field: 'oldDenomField',\n                    width: 150\n                  },\n                  {\n                    label: 'New Denom',\n                    field: 'newDenomField',\n                    width: 150\n                  },\n                  {\n                    label: 'Old Payback %',\n                    field: 'oldPaybackPerField',\n                    width: 150\n                  },\n                  {\n                    label: 'New Payback %',\n                    field: 'newPaybackPerField',\n                    width: 150\n                  },\n                  {\n                    label: 'Asset',\n                    field: 'assetField',\n                    width: 150\n                  },\n                  {\n                    label: 'Date',\n                    field: 'dateField',\n                    width: 150\n                  }],\n                rows: []\n            }\n\n            const changeDayField = this.props.apiRes.map((obj) => obj[\"Change Day\"]);\n            const recommendStatus = this.props.apiRes.map((obj) => obj[\"Recommendation Status\"]);\n            const area = this.props.apiRes.map((obj) => obj[\"Area\"]);\n            const zone = this.props.apiRes.map((obj) => obj[\"Zone\"]);\n            const bank = this.props.apiRes.map((obj) => obj[\"Bank\"]);\n            const stand = this.props.apiRes.map((obj) => obj[\"Stand\"]);\n            const netWin = this.props.apiRes.map((obj) => obj[\"NetWin\"]);\n            const oldDenom = this.props.apiRes.map((obj) => obj[\"Old Denom\"]);\n            const newDenom = this.props.apiRes.map((obj) => obj[\"New Denom\"]);\n            const oldPaybackPer = this.props.apiRes.map((obj) => obj[\"Old Payback %\"]);\n            const newPaybackPer = this.props.apiRes.map((obj) => obj[\"New Payback %\"]);\n            const asset = this.props.apiRes.map((obj) => obj[\"Asset\"]);\n            const theDate = this.props.apiRes.map((obj) => obj[\"Date\"]);\n            for(let i = 0;i<changeDayField.length;i++){\n            data.rows.push(            \n                  {\n                    changeDayField: changeDayField[i],\n                    recomStatusField: recommendStatus[i],\n                    areaField: parseInt(area[i]),\n                    zoneField: parseInt(zone[i]),\n                    bankField: parseInt(bank[i]),\n                    standField: parseInt(stand[i]),\n                    netWinField: parseInt(netWin[i]),\n                    oldDenomField: parseInt(oldDenom[i]),\n                    newDenomField: parseInt(newDenom[i]),\n                    oldPaybackPerField: parseInt(oldPaybackPer[i]),\n                    newPaybackPerField: parseInt(newPaybackPer[i]),\n                    assetField: parseInt(asset[i]),\n                    dateField: theDate[i]\n                  })\n            }\n            return (\n              <MDBDataTable\n                bordered\n                small\n                searching\n                hover \n                sorting\n                responsive\n                paging\n                data={data}\n              />\n            );\n          }\n        }\nexport default MainTable;","import React from 'react';\n\nclass Heading extends React.Component {\n\n  render(){\n    return(\n      <div style={{textAlign:'center',padding:'15px'}} >\n          <img\n            src=\"https://static.wixstatic.com/media/a9dc68_9611f10c632e4e3ea90c8b4b7556dbb1~mv2.png/v1/fill/w_386,h_96,al_c,q_85,usm_0.66_1.00_0.01/!logo-white-color.webp\"\n            alt=\"This is the main logo for Gaming Analytics\"></img>\n      </div>\n    );\n  }\n}\n\nexport default Heading;","import React from 'react';\nimport MainTable from \"./components/Table/MainTable.js\"\nimport Heading from \"./components/Heading/Heading.js\"\nimport './App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { apiResponse: [] };\n}\ncomponentDidMount() {\n  fetch(\"http://localhost:9000/testAPI\")\n  .then((res) => res.json())\n  .then(res => this.setState({apiResponse:res}))\n}\n\n  render(){\n    return(\n      <div>\n        <Heading />\n        <MainTable apiRes={this.state.apiResponse}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}